{"name": "Создание нового пользователя", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.SessionNotCreatedException: Message: session not created: This version of ChromeDriver only supports Chrome version 93\nCurrent browser version is 96.0.4664.110 with binary path C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe", "trace": "request = <SubRequest 'browser' for <Function test_create_new_user>>\n\n    @pytest.fixture\n    def browser(request):\n        browser = request.config.getoption(\"--browser\")\n        executor = request.config.getoption(\"--executor\")  # где находится Selenium Server\n        selenoid = request.config.getoption(\"--selenoid\")\n        headless = request.config.getoption(\"--headless\")\n        maximized = request.config.getoption(\"--maximized\")\n        version = request.config.getoption(\"--bversion\")\n        vnc = request.config.getoption(\"--vnc\")\n        logs = request.config.getoption(\"--logs\")\n        videos = request.config.getoption(\"--videos\")\n        mobile = request.config.getoption(\"--mobile\")\n        logger = logging.getLogger('BrowserLogger')\n        test_name = request.node.name\n    \n        logger.info(\"\\tTest \\\"{}\\\" is running\".format(test_name))\n    \n        browserstack = dict({\"chrome\": [\"92.0\", \"93.0\", \"95.0\", \"96.0\"],\n                             \"firefox\": [\"91.0\", \"92.0\", \"93.0\", \"94.0\"],\n                             \"opera\": [\"78.0\", \"79.0\", \"80.0\", \"81.0\"],\n                             \"MicrosoftEdge\": [\"93.0\", \"94.0\"]})\n    \n        if version not in browserstack[browser]:\n            version = browserstack[browser][-1]\n    \n        caps = {\n            \"browserName\": browser,\n            \"browserVersion\": version,\n            \"screenResolution\": \"1280x720\",     # разрешение экрана\n            \"name\": \"Max\",                      # именовать прогоны тестов\n            \"selenoid:options\": {\n                \"enableVNC\": vnc,               # визуализация (прорисовка) выполнения тестов\n                \"enableVideo\": videos,          # запись видео выполнения теста\n                \"enableLog\": logs               # запись логов работы КОНТЕЙНЕРОВ\n            },\n            'acceptSslCerts': True,\n            'acceptInsecureCerts': True,\n            'timeZone': 'Europe/Moscow',\n            'goog:chromeOptions': {}\n        }\n    \n        executor_url = f\"http://{executor}:4444/wd/hub\"\n    \n        if selenoid:\n    \n            driver = webdriver.Remote(command_executor=executor_url,\n                                      desired_capabilities=caps)\n    \n            if browser == \"chrome\" and mobile:  # Эмуляция работы браузера на мобильном устройстве\n                caps[\"goog:chromeOptions\"][\"mobileEmulation\"] = {\"deviceName\": \"iPhone 5/SE\"}\n    \n            if not mobile:\n                driver.maximize_window()\n    \n        else:\n            if browser == \"chrome\":\n                options = webdriver.ChromeOptions()\n                options.headless = headless\n                driver = webdriver.Chrome(\n                    executable_path=f\"{DRIVERS}/chromedriver\",\n>                   options=options\n\nconftest.py:99: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nC:\\Python_3.7.9\\lib\\site-packages\\selenium\\webdriver\\chrome\\webdriver.py:81: in __init__\n    desired_capabilities=desired_capabilities)\nC:\\Python_3.7.9\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:157: in __init__\n    self.start_session(capabilities, browser_profile)\nC:\\Python_3.7.9\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:252: in start_session\n    response = self.execute(Command.NEW_SESSION, parameters)\nC:\\Python_3.7.9\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:321: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000127543CF888>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"session not created: This version of Chro...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x778C7B74+228]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x778C7B44+180]\\\\n\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: This version of ChromeDriver only supports Chrome version 93\nE       Current browser version is 96.0.4664.110 with binary path C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe\n\nC:\\Python_3.7.9\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:242: SessionNotCreatedException"}, "description": "Позитивный тест создания нового пользователя.По завершении теста должна появиться надпись \"Your Account Has Been Created!\"", "attachments": [{"name": "log", "source": "dcc43ab6-02d4-40c3-a84f-05d607c377e6-attachment.txt", "type": "text/plain"}], "start": 1639666722156, "stop": 1639666722156, "uuid": "8f9d7cbb-c6f6-4f6b-bccc-e0b3a9425d10", "historyId": "56f33772bf0cdf88c664ca052043aa9f", "testCaseId": "daf836258f68bc55889ec0a0b9132bb9", "fullName": "test_reg_account#test_create_new_user", "labels": [{"name": "suite", "value": "test_reg_account"}, {"name": "host", "value": "sis002422"}, {"name": "thread", "value": "2172-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_reg_account"}]}