{"name": "Создание нового пользователя", "status": "broken", "statusDetails": {"message": "ValueError: Sample larger than population or is negative", "trace": "browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"a4f85c6e8fe4dc7b6fe30589a16381ef\")>, base_url = 'http://172.19.16.142/'\n\n    @allure.title(\"Создание нового пользователя\")\n    @allure.description(\"Позитивный тест создания нового пользователя.\"\n                        \"По завершении теста должна появиться надпись \\\"Your Account Has Been Created!\\\"\")\n    def test_create_new_user(browser, base_url):\n        new_user = UserLoginPage(browser)\n        new_user.open_reg_account_page(base_url)\n>       new_user.form_autocomplete()\n\ntest_reg_account.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nUserLoginPage.py:64: in form_autocomplete\n    self.enter_telephone()\nUserLoginPage.py:42: in enter_telephone\n    phone_number = self.generate_string(num_of_chars=11, num=True, disable_lowercase=True)\nBaseClass.py:122: in generate_string\n    return \"\".join(random.sample(characters, num_of_chars))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <random.Random object at 0x000002D6457B4A98>, population = '0123456789', k = 11\n\n    def sample(self, population, k):\n        \"\"\"Chooses k unique random elements from a population sequence or set.\n    \n        Returns a new list containing elements from the population while\n        leaving the original population unchanged.  The resulting list is\n        in selection order so that all sub-slices will also be valid random\n        samples.  This allows raffle winners (the sample) to be partitioned\n        into grand prize and second place winners (the subslices).\n    \n        Members of the population need not be hashable or unique.  If the\n        population contains repeats, then each occurrence is a possible\n        selection in the sample.\n    \n        To choose a sample in a range of integers, use range as an argument.\n        This is especially fast and space efficient for sampling from a\n        large population:   sample(range(10000000), 60)\n        \"\"\"\n    \n        # Sampling without replacement entails tracking either potential\n        # selections (the pool) in a list or previous selections in a set.\n    \n        # When the number of selections is small compared to the\n        # population, then tracking selections is efficient, requiring\n        # only a small set and an occasional reselection.  For\n        # a larger number of selections, the pool tracking method is\n        # preferred since the list takes less space than the\n        # set and it doesn't suffer from frequent reselections.\n    \n        if isinstance(population, _Set):\n            population = tuple(population)\n        if not isinstance(population, _Sequence):\n            raise TypeError(\"Population must be a sequence or set.  For dicts, use list(d).\")\n        randbelow = self._randbelow\n        n = len(population)\n        if not 0 <= k <= n:\n>           raise ValueError(\"Sample larger than population or is negative\")\nE           ValueError: Sample larger than population or is negative\n\nC:\\Python_3.7.9\\lib\\random.py:321: ValueError"}, "description": "Позитивный тест создания нового пользователя.По завершении теста должна появиться надпись \"Your Account Has Been Created!\"", "attachments": [{"name": "log", "source": "7feb0baf-e0f4-447f-b256-23d596a59ea4-attachment.txt", "type": "text/plain"}], "start": 1639982598972, "stop": 1639982600967, "uuid": "c1cb6c6d-e131-40d3-a442-6f6060caa409", "historyId": "56f33772bf0cdf88c664ca052043aa9f", "testCaseId": "daf836258f68bc55889ec0a0b9132bb9", "fullName": "test_reg_account#test_create_new_user", "labels": [{"name": "suite", "value": "test_reg_account"}, {"name": "host", "value": "sis002422"}, {"name": "thread", "value": "3584-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_reg_account"}]}