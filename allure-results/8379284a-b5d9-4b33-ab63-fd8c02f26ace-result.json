{"name": "test_invalid_email[mailbox.com]", "status": "failed", "statusDetails": {"message": "AssertionError: (TimeoutException('', None, None), \"Время ожидания элемента 'css selector = .text-danger' истекло\")", "trace": "self = <UserLoginPage.UserLoginPage object at 0x0000024ADC6F8488>, locator = ('css selector', '.text-danger'), timeout = 2\n\n    def wait_web_element(self, locator, timeout=2):\n        \"\"\"\n        Принимает в качестве аргументов:\n            • локатор веб-элемента,\n            • время ожидания в секундах (timeout).\n            По умолчанию timeout = 2 с.\n        Ожидает появления веб-элемента по указанному локатору на странице в течение timeout секунд.\n        Метод возвращает:\n            веб-элемент, в случае его появления на веб-странице;\n            AssertionError, если веб-элемент не был обнаружен на веб-странице за время ожидания.\n    \n        \"\"\"\n        self.logger.info('Waiting for the element {} within {} seconds'.format(locator, timeout))\n        try:\n>           el = WebDriverWait(self.browser, timeout).until(EC.visibility_of_element_located(locator))\n\nBaseClass.py:173: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"98bb1125692dd8ac4bcd459a990cf060\")>, method = <selenium.webdriver.support.expected_conditions.visibility_of_element_located object at 0x0000024ADC6C14C8>, message = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value is not False.\"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.time() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nC:\\Python_3.7.9\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:80: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nbrowser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"98bb1125692dd8ac4bcd459a990cf060\")>, base_url = 'http://172.19.16.142/', mail = 'mailbox.com'\n\n    @pytest.mark.parametrize(\"mail\",[\"mailbox.com\", \"test@mail\"])\n    def test_invalid_email(browser, base_url, mail):\n        WARNING_TEXT = \"E-Mail Address does not appear to be valid!\"\n        new_user = UserLoginPage(browser)\n        new_user.open_reg_account_page(base_url)\n        new_user.fill_in_with_letters(new_user.FIRST_NAME_FIELD)\n        new_user.fill_in_with_letters(new_user.LAST_NAME_FIELD)\n        new_user.enter_email(email=mail)\n        new_user.enter_telephone()\n        new_user.enter_and_confirm_password()\n        new_user.find_web_element(new_user.PRIVACY_POLICY_CHECKBOX).click()\n        new_user.wait_and_click(new_user.SUBMIT_CONTINUE_BUTTON)\n>       assert new_user.wait_web_element(new_user.INPUT_FIELD_ERROR).text == WARNING_TEXT, \"Invalid warning message\"\n\ntest_reg_account.py:116: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <UserLoginPage.UserLoginPage object at 0x0000024ADC6F8488>, locator = ('css selector', '.text-danger'), timeout = 2\n\n    def wait_web_element(self, locator, timeout=2):\n        \"\"\"\n        Принимает в качестве аргументов:\n            • локатор веб-элемента,\n            • время ожидания в секундах (timeout).\n            По умолчанию timeout = 2 с.\n        Ожидает появления веб-элемента по указанному локатору на странице в течение timeout секунд.\n        Метод возвращает:\n            веб-элемент, в случае его появления на веб-странице;\n            AssertionError, если веб-элемент не был обнаружен на веб-странице за время ожидания.\n    \n        \"\"\"\n        self.logger.info('Waiting for the element {} within {} seconds'.format(locator, timeout))\n        try:\n            el = WebDriverWait(self.browser, timeout).until(EC.visibility_of_element_located(locator))\n        except TimeoutException as time_is_up:\n            self.logger.error(\"Element \\'{} = {}\\' was not found on the page\".format(*locator))\n            self.browser.save_screenshot(self.screenshot_name)\n>           raise AssertionError(time_is_up, \"Время ожидания элемента \\'{} = {}\\' истекло\".format(*locator))\nE           AssertionError: (TimeoutException('', None, None), \"Время ожидания элемента 'css selector = .text-danger' истекло\")\n\nBaseClass.py:177: AssertionError"}, "attachments": [{"name": "log", "source": "c1ce990e-8321-4838-adfe-e411b842b3a5-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "mail", "value": "'mailbox.com'"}], "start": 1640083363131, "stop": 1640083368838, "uuid": "1f3573fe-3bf3-4af3-9f6e-af49d46adf92", "historyId": "70d5d6023208ae737dbd7aab242b44fd", "testCaseId": "f4b875f38472ec8c30f31a4608e91789", "fullName": "test_reg_account#test_invalid_email", "labels": [{"name": "suite", "value": "test_reg_account"}, {"name": "host", "value": "sis002422"}, {"name": "thread", "value": "1160-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_reg_account"}]}